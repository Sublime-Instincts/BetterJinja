%YAML 1.2
---
# https://jinja.palletsprojects.com/en/3.1.x/templates/
# http://www.sublimetext.com/docs/syntax.html
name: Text (Jinja)
scope: text.jinja
version: 2

file_extensions:
  - txt.jinja
  - txt.jinja2
  - txt.j2
  - jinja.txt
  - jinja2.txt
  - j2.txt

variables:

  ident: (?:{{ident_start}}{{ident_part}}*)
  ident_start: '[a-zA-Z_]'
  ident_part: '[a-zA-Z0-9_]*'

  dot_accessor: (?:\.(?!\.))

  modifiers: '[-+]'

  builtin_filters: |-
    (?x:
    # https://jinja.palletsprojects.com/en/3.1.x/templates/#list-of-builtin-filters
      abs | attr | batch | capitalize | center | default | dictsort | escape
    | filesizeformat | first | float | forceescape | format | groupby | indent
    | int | items | join | last | length | list | lower | map | max | min | pprint
    | random | reject | rejectattr | replace | reverse | round | safe | select
    | selectattr | slice | sort | string | striptags | sum | title | tojson
    | trim | truncate | unique | upper | urlencode | urlize | wordcount
    | wordwrap | xmlattr
    # https://jinja.palletsprojects.com/en/3.1.x/templates/#html-escaping
    | e | safe )

  builtin_tests: |-
    (?x:
    # https://jinja.palletsprojects.com/en/3.1.x/templates/#list-of-builtin-tests
      boolean | callable | defined | divisibleby | eq | escaped | even
    | false | filter | float | ge | gt | in | integer | iterable | le | lower
    | lt | mapping | ne | none | number | odd | sameas | sequence | string
    | test | true | undefined | upper )

  builtin_functions: |-
    (?x:
    # https://jinja.palletsprojects.com/en/3.1.x/templates/#list-of-global-functions
      cycler | dict | joiner | lipsum | namespace | range
    # https://jinja.palletsprojects.com/en/3.1.x/templates/#i18n
    | _ | gettext | ngettext )

###############################################################################

contexts:
  main:
    - meta_scope: meta.template.jinja
    - include: jinja

  interpolations:
    # to be included in strings to clear string scope within tags
    - match: (?={[{%#])
      push: interpolation-body

  interpolation-body:
    - clear_scopes: 1
    - meta_include_prototype: false
    - include: jinja-comment-tags
    - include: jinja-statement-tags
    - include: jinja-expression-tags
    - include: immediately-pop

  jinja:
    - include: jinja-comment-lines
    - include: jinja-statement-lines
    - include: jinja-comment-tags
    - include: jinja-statement-tags
    - include: jinja-expression-tags

###[ JINJA COMMENT LINES ]#####################################################

  jinja-comment-lines:
    - match: \#\#
      scope: punctuation.definition.comment.jinja
      push: jinja-comment-line-body

  jinja-comment-line-body:
    - meta_scope: meta.embedded.comment.jinja comment.line.jinja
    - match: $\n?
      pop: 1

###[ JINJA COMMENT TAGS ]######################################################

  jinja-comment-tags:
    - match: \{\#
      scope: punctuation.definition.comment.begin.jinja
      push: jinja-comment-tag-body

  jinja-comment-tag-body:
    - meta_scope: meta.embedded.comment.jinja comment.block.jinja
    - match: \#\}
      scope: punctuation.definition.comment.end.jinja
      pop: 1

###[ JINJA STATEMENT LINES ]###################################################

  jinja-statement-lines:
    # https://jinja.palletsprojects.com/en/3.1.x/templates/#line-statements
    - match: ^\s*(#(?!#))
      scope: meta.embedded.statement.jinja
      captures:
        1: punctuation.section.embedded.jinja
      push:
        - jinja-statement-line-end
        - jinja-statement-line-begin

  jinja-statement-line-begin:
    - meta_include_prototype: false
    - include: control-statement
    - include: block-statement-line
    - include: import-statement-line
    - include: macro-statement-line
    - include: raw-statement-line
    - include: set-statement-line
    - include: comment-statement-line
    - include: other-statement
    - include: else-pop
    - include: eol-pop

  jinja-statement-line-end:
    - meta_content_scope: meta.embedded.statement.jinja source.jinja.embedded
    - match: \:?(?=\s*(?:##|$))
      scope: meta.embedded.statement.jinja source.jinja.embedded punctuation.section.block.jinja
      pop: 1
    - include: expressions

###[ JINJA STATEMENT TAGS ]####################################################

  jinja-statement-tags:
    - match: \{%{{modifiers}}?
      scope: meta.embedded.statement.jinja punctuation.section.embedded.begin.jinja
      push:
        - jinja-statement-tag-end
        - jinja-statement-tag-begin

  jinja-statement-tag-begin:
    - include: control-statement
    - include: block-statement-tag
    - include: import-statement-tag
    - include: macro-statement-tag
    - include: raw-statement-tag
    - include: set-statement-tag
    - include: comment-statement-tag
    - include: other-statement
    - include: else-pop

  jinja-statement-tag-end:
    - meta_content_scope: meta.embedded.statement.jinja source.jinja.embedded
    - match: '{{modifiers}}?%\}'
      scope: meta.embedded.statement.jinja punctuation.section.embedded.end.jinja
      pop: 1
    - include: expressions

###[ JINJA EXPRESSION TAGS ]###################################################

  jinja-expression-tags:
    - match: \{{2}
      scope: meta.embedded.expression.jinja punctuation.section.embedded.begin.jinja
      push: jinja-expression-tag-body

  jinja-expression-tag-body:
    - meta_content_scope: meta.embedded.expression.jinja source.jinja.embedded
    - match: \}{2}
      scope: meta.embedded.expression.jinja punctuation.section.embedded.end.jinja
      pop: 1
    - include: expressions

###[ IMPORT DECLARATIONS ]#####################################################

  import-statement-line:
    # extends keyword
    # https://jinja.palletsprojects.com/en/3.1.x/templates/#extends
    - match: extends\b
      scope: keyword.control.import.extends.jinja
      set: import-statement-line-body
    # import keywords
    # https://jinja.palletsprojects.com/en/3.1.x/templates/#import
    - match: import\b
      scope: keyword.control.import.jinja
      set: import-statement-line-body
    - match: from\b
      scope: keyword.control.import.from.jinja
      set:
        - import-statement-line-body
        - from-statement-line-body
    # include keywords
    # https://jinja.palletsprojects.com/en/3.1.x/templates/#include
    - match: include\b
      scope: keyword.control.import.jinja
      set: import-statement-line-body

  from-statement-line-body:
    - include: from-statement-tag-body
    - include: eol-pop

  import-statement-line-body:
    - meta_scope: meta.import.jinja
    - include: import-keywords
    - include: expressions
    - include: eol-pop

  import-statement-tag:
    # extends keyword
    # https://jinja.palletsprojects.com/en/3.1.x/templates/#extends
    - match: extends\b
      scope: keyword.control.import.extends.jinja
      set: import-statement-tag-body
    # import keywords
    # https://jinja.palletsprojects.com/en/3.1.x/templates/#import
    - match: import\b
      scope: keyword.control.import.jinja
      set: import-statement-tag-body
    - match: from\b
      scope: keyword.control.import.from.jinja
      set:
        - import-statement-tag-body
        - from-statement-tag-body
    # include keywords
    # https://jinja.palletsprojects.com/en/3.1.x/templates/#include
    - match: include\b
      scope: keyword.control.import.jinja
      set: import-statement-tag-body

  from-statement-tag-body:
    - match: import\b
      scope: keyword.control.import.jinja
      pop: 1
    - include: strings
    - include: else-pop

  import-statement-tag-body:
    - meta_scope: meta.import.jinja
    - include: block-pop
    - include: import-keywords
    - include: expressions

  import-keywords:
    - match: (ignore)(?:\s+(missing))?\b
      captures:
        1: keyword.other.jinja
        2: keyword.other.jinja
    - match: (with(?:out)?)(?:\s+(context))?\b
      captures:
        1: keyword.other.jinja
        2: keyword.other.jinja

###[ BLOCK DECLARATIONS ]######################################################

  block-statement-line:
    - match: block\b
      scope: keyword.declaration.block.jinja
      set: block-statement-line-name
    - match: endblock\b
      scope: keyword.declaration.block.end.jinja
      pop: 1

  block-statement-line-name:
    - include: block-statement-tag-name
    - include: eol-pop

  block-statement-tag:
    - match: block\b
      scope: keyword.declaration.block.jinja
      set: block-statement-tag-name
    - match: endblock\b
      scope: keyword.declaration.block.end.jinja
      pop: 1

  block-statement-tag-name:
    - match: '{{ident}}\b'
      scope: entity.name.section.block.jinja
      pop: 1
    - include: else-pop

###[ MACRO DECLARATIONS ]######################################################

  macro-statement-line:
    - match: macro\b
      scope: meta.function.jinja keyword.declaration.macro.jinja
      set:
        - macro-statement-line-parameter-list
        - macro-statement-line-name
    - match: endmacro\b
      scope: keyword.declaration.macro.end.jinja
      pop: 1

  macro-statement-line-name:
    - include: macro-statement-tag-name
    - include: eol-pop

  macro-statement-line-parameter-list:
    - meta_content_scope: meta.function.identifier.jinja
    - include: macro-statement-tag-parameter-list
    - include: eol-pop

  macro-statement-tag:
    - match: macro\b
      scope: meta.function.jinja keyword.declaration.macro.jinja
      set:
        - macro-statement-tag-parameter-list
        - macro-statement-tag-name
    - match: endmacro\b
      scope: keyword.declaration.macro.end.jinja
      pop: 1

  macro-statement-tag-name:
    - match: '{{ident}}\b'
      scope: entity.name.function.macro.jinja
      pop: 1
    - include: else-pop

  macro-statement-tag-parameter-list:
    - meta_content_scope: meta.function.identifier.jinja
    - match: \(
      scope: punctuation.section.parameters.begin.jinja
      set: macro-statement-tag-parameter-list-body
    - include: else-pop

  macro-statement-tag-parameter-list-body:
    - meta_scope: meta.function.parameters.jinja
    - match: \)
      scope: punctuation.section.parameters.end.jinja
      pop: 1
    - match: ','
      scope: punctuation.separator.parameters.jinja
    - match: '[:=]'
      scope: keyword.operator.assignment.jinja
      push: parameter-value
    - match: '{{ident}}\b'
      scope: variable.parameter.jinja
    - include: block-pop

  parameter-value:
    - match: (?=[,)])
      pop: 1
    - include: block-pop
    - include: expressions

###[ COMMENT BLOCK DECLARATIONS ]##############################################

  comment-statement-line:
    - match: comment\b
      scope: keyword.other.tag.jinja
      pop: 2  # skip default `statement-line-end`
      push:
        - comment-block
        - jinja-statement-line-end

  comment-statement-tag:
    - match: comment\b
      scope: keyword.other.tag.jinja
      pop: 2 # skip default `statement-tag-end`
      push:
        - comment-block
        - jinja-statement-tag-end

  comment-block:
    - meta_include_prototype: false
    # start block at new line or with next non-whitespace
    - match: ^|(?=\s*\S)
      set: comment-block-body

  comment-block-body:
    # All but final `{% endcomment %}` or `# endcomment` is treated literal
    - meta_content_scope: comment.block.jinja.django
    - match: (?:^\s*)?(({%{{modifiers}}?)(\s*(endcomment\b)))
      captures:
        1: meta.embedded.statement.jinja
        2: punctuation.section.embedded.begin.jinja
        3: source.jinja.embedded
        4: keyword.other.endtag.jinja.django
      set: jinja-statement-tag-end
    - match: ^\s*(#)(\s*(endcomment\b))
      scope: meta.embedded.statement.jinja
      captures:
        1: punctuation.section.embedded.begin.jinja
        2: source.jinja.embedded
        3: keyword.other.endtag.jinja.django
      set: jinja-statement-line-end

###[ RAW BLOCK DECLARATIONS ]##################################################

  raw-statement-line:
    # https://jinja.palletsprojects.com/en/3.1.x/templates/#line-statements
    - match: raw\b
      scope: keyword.other.tag.jinja
      pop: 2  # skip default `statement-line-end`
      push:
        - raw-block
        - jinja-statement-line-end

  raw-statement-tag:
    - match: raw\b
      scope: keyword.other.tag.jinja
      pop: 2 # skip default `statement-tag-end`
      push:
        - raw-block
        - jinja-statement-tag-end

  raw-block:
    - meta_include_prototype: false
    # start block at new line or with next non-whitespace
    - match: ^|(?=\s*\S)
      set: raw-block-body

  raw-block-body:
    # All but final `{% endraw %}` or `# endraw` is treated literal
    # https://jinja.palletsprojects.com/en/3.1.x/templates/#escaping
    - meta_content_scope: markup.raw.block.jinja
    - match: (?:^\s*)?(({%{{modifiers}}?)(\s*(endraw\b)))
      captures:
        1: meta.embedded.statement.jinja
        2: punctuation.section.embedded.begin.jinja
        3: source.jinja.embedded
        4: keyword.other.endtag.jinja
      set: jinja-statement-tag-end
    - match: ^\s*(#)(\s*(endraw\b))
      scope: meta.embedded.statement.jinja
      captures:
        1: punctuation.section.embedded.begin.jinja
        2: source.jinja.embedded
        3: keyword.other.endtag.jinja
      set: jinja-statement-line-end

###[ VARIABLE DECLARATIONS ]###################################################

  set-statement-line:
    - match: set\b
      scope: meta.declaration.jinja keyword.declaration.variable.jinja
      set: set-statement-line-name
    - match: endset\b
      scope: keyword.declaration.variable.jinja
      pop: 1

  set-statement-line-name:
    - meta_content_scope: meta.declaration.identifier.jinja
    - include: set-statement-tag-name
    - include: eol-pop

  set-statement-tag:
    - match: set\b
      scope: meta.declaration.jinja keyword.declaration.variable.jinja
      set: set-statement-tag-name
    - match: endset\b
      scope: keyword.declaration.variable.jinja
      pop: 1

  set-statement-tag-name:
    - meta_content_scope: meta.declaration.identifier.jinja
    - include: separators
    - include: tuples
    - include: variables
    - include: else-pop

###[ CONTROL STATEMENTS ]######################################################

  control-statement:
    # control keywords
    # https://jinja.palletsprojects.com/en/3.1.x/templates/#list-of-control-structures
    # conditional
    - match: if\b
      scope: keyword.control.conditional.if.jinja
      pop: 1
    - match: else\b
      scope: keyword.control.conditional.else.jinja
      pop: 1
    - match: elif\b
      scope: keyword.control.conditional.elseif.jinja
      pop: 1
    - match: endif\b
      scope: keyword.control.conditional.endif.jinja
      pop: 1
    # loops
    - match: for\b
      scope: keyword.control.loop.for.jinja
      pop: 1
    - match: endfor\b
      scope: keyword.control.loop.endfor.jinja
      pop: 1
    - match: continue\b
      scope: keyword.control.flow.continue.jinja
      pop: 1
    - match: break\b
      scope: keyword.control.flow.break.jinja
      pop: 1

###[ OTHER STATEMENTS ]########################################################

  other-statement:
    # filter block tags
    - match: filter\b
      scope: keyword.other.tag.jinja
      set:
        - filter-meta
        - filter-name
    # any block tags
    - match: end{{ident}}\b(?!\s*[=(])
      scope: keyword.other.endtag.jinja
      pop: 1
    - match: '{{ident}}\b(?!\s*[=(])'
      scope: keyword.other.tag.jinja
      pop: 1

###[ EXPRESSIONS ]#############################################################

  expressions:
    - include: dictionaries
    - include: lists
    - include: parens
    - include: constants
    - include: numbers
    - include: strings
    - include: operators
    - include: separators
    - include: filters
    - include: function-calls
    - include: variables

###[ FILTERS ]#################################################################

  filters:
    - match: \|
      scope: keyword.operator.symbol.jinja keyword.operator.assignment.pipe.jinja
      push:
        - filter-meta
        - filter-name

  filter-meta:
    - meta_include_prototype: false
    - meta_scope: meta.filter.jinja
    - include: immediately-pop

  filter-name:
    - match: '{{builtin_filters}}\b'
      scope: meta.function-call.identifier.jinja support.function.filter.jinja
      set: function-call-argument-list
    - match: '{{ident}}\b'
      scope: meta.function-call.identifier.jinja variable.function.filter.jinja
      set: function-call-argument-list
    - include: else-pop
    - include: eol-pop

###[ FUNCTION CALLS ]##########################################################

  function-calls:
    - match: '{{builtin_functions}}(?=\()'
      scope: meta.function-call.identifier.jinja support.function.global.jinja
      push: function-call-argument-list
    - match: '{{ident}}(?=\()'
      scope: meta.function-call.identifier.jinja variable.function.jinja
      push: function-call-argument-list

  function-call-argument-list:
    - match: \(
      scope: punctuation.section.arguments.begin.jinja
      set: function-call-argument-list-body
    - match: ':'
      scope: punctuation.separator.arguments.jinja.django
      pop: 1
    - include: immediately-pop

  function-call-argument-list-body:
    - meta_scope: meta.function-call.arguments.jinja
    - match: \)
      scope: punctuation.section.arguments.end.jinja
      pop: 1
    - match: ','
      scope: punctuation.separator.arguments.jinja
    - match: '{{ident}}(?=\s*=)'
      scope: variable.parameter.jinja
    - include: block-pop
    - include: expressions

###[ COLLECTIONS ]#############################################################

  dictionaries:
    - match: \{
      scope: punctuation.section.mapping.begin.jinja
      push: dictionary-body

  dictionary-body:
    - meta_scope: meta.mapping.jinja
    - include: block-pop
    - match: \}
      scope: punctuation.section.mapping.end.jinja
      pop: 1
    - match: ','
      scope: punctuation.separator.mapping.pair.jinja
    - match: ':'
      scope: punctuation.separator.mapping.key-value.jinja
      set: dictionary-value
    - match: (?=\S)
      set: dictionary-key

  dictionary-key:
    - meta_content_scope: meta.mapping.key.jinja
    - match: (?=[,:}])
      set: dictionary-body
    - include: block-pop
    - include: expressions

  dictionary-value:
    - meta_content_scope: meta.mapping.value.jinja
    - match: (?=[,:}])
      set: dictionary-body
    - include: block-pop
    - include: expressions

  lists:
    - match: \[
      scope: punctuation.section.sequence.begin.jinja
      push: list-body

  list-body:
    - meta_scope: meta.sequence.list.jinja
    - match: \]
      scope: punctuation.section.sequence.end.jinja
      pop: 1
    - include: block-pop
    - include: expressions

  parens:
    - match: (?=\()
      branch_point: parens
      branch:
        - group
        - tuple

  group:
    - meta_include_prototype: false
    - match: \(
      scope: punctuation.section.group.begin.jinja
      set: group-body

  group-body:
    - meta_scope: meta.group.jinja
    - match: \)
      scope: punctuation.section.group.end.jinja
      pop: 1
    - match: (?=,)
      fail: parens
    - include: block-pop
    - include: expressions

  tuples:
    - match: \(
      scope: punctuation.section.sequence.begin.jinja
      push: tuple-body

  tuple:
    - meta_include_prototype: false
    - match: \(
      scope: punctuation.section.sequence.begin.jinja
      set: tuple-body

  tuple-body:
    - meta_scope: meta.sequence.tuple.jinja
    - match: \)
      scope: punctuation.section.sequence.end.jinja
      pop: 1
    - include: block-pop
    - include: expressions

###[ OPERATORS ]###############################################################

  operators:
    # alphanumeric operators
    - match: as\b
      scope: keyword.operator.word.jinja keyword.operator.assignment.as.jinja
    - match: in\b
      scope: keyword.operator.word.jinja keyword.operator.iteration.in.jinja
    - match: (?:and|or|not)\b
      scope: keyword.operator.word.jinja keyword.operator.logical.jinja
    - match: is\b
      scope: keyword.operator.word.jinja keyword.operator.logical.jinja
      push: expect-test-function
    # symbolic operators
    - match: \~
      scope: keyword.operator.symbol.jinja keyword.operator.concatenation.jinja
    - match: '[=!]=|[<>]=?'
      scope: keyword.operator.symbol.jinja keyword.operator.comparison.jinja
    - match: '='
      scope: keyword.operator.symbol.jinja keyword.operator.assignment.jinja
    - match: '[*/]{2}|[-+*/%]'
      scope: keyword.operator.symbol.jinja keyword.operator.arithmetic.jinja

  separators:
    - match: ','
      scope: punctuation.separator.sequence.jinja

  expect-test-function:
    - match: not\b
      scope: keyword.operator.word.jinja keyword.operator.logical.jinja
    - match: '{{builtin_tests}}\b'
      scope: meta.function-call.identifier.jinja support.function.test.jinja
      set: function-call-argument-list
    - match: '{{ident}}\b'
      scope: meta.function-call.identifier.jinja variable.function.test.jinja
      set: function-call-argument-list
    - include: else-pop

###[ LITERALS ]################################################################

  constants:
    - match: '[Ff]alse\b'
      scope: constant.language.boolean.false.jinja
    - match: '[Tt]rue\b'
      scope: constant.language.boolean.true.jinja
    - match: '[Nn]one\b'
      scope: constant.language.null.jinja

  numbers:
    - match: (?:\d[\d_]*)?(\.)\d+(?:[eE]\d*)?
      scope: meta.number.float.decimal.jinja constant.numeric.value.jinja
      captures:
        1: punctuation.separator.decimal.jinja
    - match: \d[\d_]*
      scope: meta.number.integer.decimal.jinja constant.numeric.value.jinja

  strings:
    - match: \"
      scope: punctuation.definition.string.begin.jinja
      push: double-quoted-string-body
    - match: \'
      scope: punctuation.definition.string.begin.jinja
      push: single-quoted-string-body

  double-quoted-string-body:
    - meta_include_prototype: false
    - meta_scope: meta.string.jinja string.quoted.double.jinja
    - match: \"
      scope: punctuation.definition.string.end.jinja
      pop: 1
    - include: string-prototype
    - include: escaped-characters
    - include: string-placeholders
    - include: string-interpolations

  single-quoted-string-body:
    - meta_include_prototype: false
    - meta_scope: meta.string.jinja string.quoted.single.jinja
    - match: \'
      scope: punctuation.definition.string.end.jinja
      pop: 1
    - include: string-prototype
    - include: escaped-characters
    - include: string-placeholders

  string-prototype: []

  string-interpolations:
    - match: \{
      scope: punctuation.section.interpolation.begin.jinja
      push: string-interpolation-body

  string-interpolation-body:
    - clear_scopes: 1
    - meta_scope: meta.interpolation.jinja
    - match: \}
      scope: punctuation.section.interpolation.end.jinja
      pop: 1
    - match: ':'
      scope: punctuation.separator.format-spec.jinja
      push: string-interpolation-formatspec
    - match: '![ars]\b'
      scope: storage.modifier.conversion.jinja
    - include: expressions

  string-interpolation-formatspec:
    - meta_content_scope: meta.format-spec.jinja constant.other.format-spec.jinja
    - match: \}
      scope: punctuation.section.interpolation.end.jinja
      pop: 2
    - include: string-interpolations

  string-placeholders:
    # printf style (from Python)
    - match: |-
        (?x)
        %
          ( \( ({{ident}}) \) )? # mapping key
          \#?            # alternate form
          0?             # pad with zeros
          \-?            # left-adjust
          \ ?            # implicit sign
          [+-]?          # sign
          (\d*|\*)       # width
          (\. (\d*|\*))? # precision
          [hlL]?         # length modifier (but ignored)
          [acdeEfFgGiorsuxX%]
      scope: constant.other.placeholder.jinja
      captures:
        2: variable.other.placeholder.jinja
    # strftime spec (from Python)
    - match: \%(?:[aAwdbBGmyYHIpMSfzZjuUVWcxX%]|-[dmHIMSj])
      scope: constant.other.placeholder.jinja

  escaped-characters:
    # escaped string braces (from Python)
    - match: \{[{%]|[%}]\}
      scope: constant.character.escape.jinja
    # escapes (from Python)
    - match: \\x\h{2}
      scope: constant.character.escape.hex.jinja
    - match: \\[0-7]{1,3}
      scope: constant.character.escape.octal.jinja
    - match: \\[\\"'abfnrtv]
      scope: constant.character.escape.jinja
    # unicode (from Python)
    - match: \\u\h{4}
      scope: constant.character.escape.unicode.16bit.jinja
    - match: \\U\h{8}
      scope: constant.character.escape.unicode.32bit.jinja
    - match: \\N\{[-a-zA-Z ]+\}
      scope: constant.character.escape.unicode.name.jinja

###[ VARIABLES ]###############################################################

  variables:
    - match: _\b
      scope: variable.language.anonymous.jinja
    - match: loop\b
      scope: meta.path.jinja variable.language.loop.jinja
    - match: (?={{ident_start}})
      branch_point: variable
      branch:
        - unqualified-variable
        - qualified-variable
    - match: '{{dot_accessor}}'
      scope: punctuation.accessor.dot.jinja
      push:
        - accessor
        - member

  unqualified-variable:
    - meta_include_prototype: false
    - match: '{{ident}}\b'
      scope: variable.other.readwrite.jinja
      set:
        - variable-check
        - subscription
    - include: immediately-pop

  variable-check:
    - match: (?={{dot_accessor}})
      fail: variable
    - include: immediately-pop

  qualified-variable:
    - meta_include_prototype: false
    - match: '{{ident}}\b'
      scope: variable.other.object.jinja
      set:
        - accessor
        - subscription
    - include: immediately-pop

  accessor:
    - meta_include_prototype: false
    - meta_scope: meta.path.jinja
    - match: '{{dot_accessor}}'
      scope: punctuation.accessor.dot.jinja
      push: member
    - include: immediately-pop

  member:
    - match: '{{ident}}(?=\()'
      scope: meta.function-call.identifier.jinja variable.function.method.jinja
      set:
        - subscription
        - function-call-argument-list
    - match: (?={{ident_start}})
      branch_point: property
      branch:
        - property
        - object
      pop: 1
    - include: subscription

  object:
    - match: '{{ident}}\b'
      scope: variable.other.object.jinja
      set: subscription
    - include: immediately-pop

  property:
    - match: '{{ident}}\b'
      scope: variable.other.member.jinja
      set:
        - property-check
        - subscription
    - include: immediately-pop

  property-check:
    - match: (?={{dot_accessor}})
      fail: property
    - include: immediately-pop

  subscription:
    - match: \[
      scope: punctuation.section.subscription.begin.jinja
      set: subscription-body
    - include: immediately-pop

  subscription-body:
    - meta_scope: meta.subscription.jinja
    - match: \]
      scope: punctuation.section.subscription.end.jinja
      set: subscription
    - match: ':'
      scope: punctuation.separator.slice.jinja
    - include: expressions

###[ PROTOTYPES ]##############################################################

  else-pop:
    - match: (?=\S)
      pop: 1

  immediately-pop:
    - match: ''
      pop: 1

  block-pop:
    - match: (?={{modifiers}}?[%}]})
      pop: 1

  eol-pop:
    - match: (?=\:?\s*(?:##|$))
      pop: 1
