{
    "scope": "(text.jinja, text.html.jinja, source.yaml.jinja) & (meta.interpolation.jinja | meta.statement.jinja)",
    "completions": [
        {
            "trigger": "boolean",
            "contents": "boolean()",
            "kind": ["namespace", "t", "Jinja test"],
            "annotation": "Jinja test",
            "details": "Return <code>true</code> if the object is a boolean value.",
        },
        {
            "trigger": "callable",
            "contents": "callable()",
            "kind": ["namespace", "t", "Jinja test"],
            "annotation": "Jinja test",
            "details": "Return whether the object is callable.",
        },
        {
            "trigger": "defined",
            "contents": "defined()",
            "kind": ["namespace", "t", "Jinja test"],
            "annotation": "Jinja test",
            "details": "Return <code>true</code> if the variable is defined.",
        },
        {
            "trigger": "divisibleby",
            "contents": "divisibleby()",
            "kind": ["namespace", "t", "Jinja test"],
            "annotation": "Jinja test",
            "details": "Check if a variable is divisible by a number.",
        },
        {
            "trigger": "eq",
            "contents": "eq()",
            "kind": ["namespace", "t", "Jinja test"],
            "annotation": "Jinja test",
            "details": "Same as <code>a == b</code>.",
        },
        {
            "trigger": "escaped",
            "contents": "escaped()",
            "kind": ["namespace", "t", "Jinja test"],
            "annotation": "Jinja test",
            "details": "Check if the value is escaped.",
        },
        {
            "trigger": "even",
            "contents": "even()",
            "kind": ["namespace", "t", "Jinja test"],
            "annotation": "Jinja test",
            "details": "Return <code>true</code> if the variable is even.",
        },
        {
            "trigger": "false",
            "contents": "false()",
            "kind": ["namespace", "t", "Jinja test"],
            "annotation": "Jinja test",
            "details": "Return <code>true</code> if the object is False.",
        },
        {
            "trigger": "filter",
            "contents": "filter()",
            "kind": ["namespace", "t", "Jinja test"],
            "annotation": "Jinja test",
            "details": "Check if a filter exists by name.",
        },
        {
            "trigger": "float",
            "contents": "float()",
            "kind": ["namespace", "t", "Jinja test"],
            "annotation": "Jinja test",
            "details": "Return <code>true</code> if the object is a float.",
        },
        {
            "trigger": "ge",
            "contents": "ge()",
            "kind": ["namespace", "t", "Jinja test"],
            "annotation": "Jinja test",
            "details": "Same as <code>a >= b</code>.",
        },
        {
            "trigger": "gt",
            "contents": "gt()",
            "kind": ["namespace", "t", "Jinja test"],
            "annotation": "Jinja test",
            "details": "Same as <code>a > b.</code>",
        },
        {
            "trigger": "in",
            "contents": "in()",
            "kind": ["namespace", "t", "Jinja test"],
            "annotation": "Jinja test",
            "details": "Check if value is in sequence.",
        },
        {
            "trigger": "integer",
            "contents": "integer()",
            "kind": ["namespace", "t", "Jinja test"],
            "annotation": "Jinja test",
            "details": "Return <code>true</code> if the object is an integer.",
        },
        {
            "trigger": "iterable",
            "contents": "iterable()",
            "kind": ["namespace", "t", "Jinja test"],
            "annotation": "Jinja test",
            "details": "Check if itâ€™s possible to iterate over an object.",
        },
        {
            "trigger": "le",
            "contents": "le()",
            "kind": ["namespace", "t", "Jinja test"],
            "annotation": "Jinja test",
            "details": "Same as a <= b.",
        },
        {
            "trigger": "lower",
            "contents": "lower()",
            "kind": ["namespace", "t", "Jinja test"],
            "annotation": "Jinja test",
            "details": "Return <code>true</code> if the variable is lowercased.",
        },
        {
            "trigger": "lt",
            "contents": "lt()",
            "kind": ["namespace", "t", "Jinja test"],
            "annotation": "Jinja test",
            "details": "Same as <code>a < b</code>.",
        },
        {
            "trigger": "mapping",
            "contents": "mapping()",
            "kind": ["namespace", "t", "Jinja test"],
            "annotation": "Jinja test",
            "details": "Return <code>true</code> if the object is a mapping (dict etc.).",
        },
        {
            "trigger": "ne",
            "contents": "ne()",
            "kind": ["namespace", "t", "Jinja test"],
            "annotation": "Jinja test",
            "details": "Same as <code>a != b</code>.",
        },
        {
            "trigger": "none",
            "contents": "none()",
            "kind": ["namespace", "t", "Jinja test"],
            "annotation": "Jinja test",
            "details": "Return <code>true</code> if the variable is none.",
        },
        {
            "trigger": "number",
            "contents": "number()",
            "kind": ["namespace", "t", "Jinja test"],
            "annotation": "Jinja test",
            "details": "Return <code>true</code> if the variable is a number.",
        },
        {
            "trigger": "odd",
            "contents": "odd()",
            "kind": ["namespace", "t", "Jinja test"],
            "annotation": "Jinja test",
            "details": "Return <code>true</code> if the variable is odd.",
        },
        {
            "trigger": "sameas",
            "contents": "sameas()",
            "kind": ["namespace", "t", "Jinja test"],
            "annotation": "Jinja test",
            "details": "Check if an object points to the same memory address than another object.",
        },
        {
            "trigger": "sequence",
            "contents": "sequence()",
            "kind": ["namespace", "t", "Jinja test"],
            "annotation": "Jinja test",
            "details": "Return <code>true</code> if the variable is a sequence (iterables).",
        },
        {
            "trigger": "string",
            "contents": "string()",
            "kind": ["namespace", "t", "Jinja test"],
            "annotation": "Jinja test",
            "details": "Return <code>true</code> if the object is a string.",
        },
        {
            "trigger": "test",
            "contents": "test()",
            "kind": ["namespace", "t", "Jinja test"],
            "annotation": "Jinja test",
            "details": "Check if a test exists by name.",
        },
        {
            "trigger": "true",
            "contents": "true()",
            "kind": ["namespace", "t", "Jinja test"],
            "annotation": "Jinja test",
            "details": "Return <code>true</code> if the object is True.",
        },
        {
            "trigger": "undefined",
            "contents": "undefined()",
            "kind": ["namespace", "t", "Jinja test"],
            "annotation": "Jinja test",
            "details": "Return <code>true</code> if the variable is defined.",
        },
        {
            "trigger": "upper",
            "contents": "upper()",
            "kind": ["namespace", "t", "Jinja test"],
            "annotation": "Jinja test",
            "details": "Return <code>true</code> if the variable is uppercased.",
        },
    ],
}
