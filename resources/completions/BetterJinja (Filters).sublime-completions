{
    "scope": "text.jinja text.html.basic & (meta.placeholder.jinja | meta.statement.jinja)",
    "completions": [
        {
            "trigger": "abs",
            "contents": "abs()",
            "kind": ["markup", "f", "Jinja filter"],
            "annotation": "Jinja filter",
            "details": "Return the absolute value of the argument.",
        },
        {
            "trigger": "attr",
            "contents": "attr()",
            "kind": ["markup", "f", "Jinja filter"],
            "annotation": "Jinja filter",
            "details": "Get an attribute of an object.",
        },
        {
            "trigger": "batch",
            "contents": "batch()",
            "kind": ["markup", "f", "Jinja filter"],
            "annotation": "Jinja filter",
            "details": "A filter that batches items.",
        },
        {
            "trigger": "capitalize",
            "contents": "capitalize()",
            "kind": ["markup", "f", "Jinja filter"],
            "annotation": "Jinja filter",
            "details": "Capitalize a value.",
        },
        {
            "trigger": "center",
            "contents": "center()",
            "kind": ["markup", "f", "Jinja filter"],
            "annotation": "Jinja filter",
            "details": "Centers the value in a field of a given width.",
        },
        {
            "trigger": "default",
            "contents": "default()",
            "kind": ["markup", "f", "Jinja filter"],
            "annotation": "Jinja filter",
            "details": "If the value is undefined it will return the passed default value, otherwise the value of the variable.",
        },
        {
            "trigger": "dictsort",
            "contents": "dictsort()",
            "kind": ["markup", "f", "Jinja filter"],
            "annotation": "Jinja filter",
            "details": "Sort a dict and yield (key, value) pairs.",
        },
        {
            "trigger": "escape",
            "contents": "escape()",
            "kind": ["markup", "f", "Jinja filter"],
            "annotation": "Jinja filter",
            "details": "Replace the characters &, <, >, ', and \" in the string with HTML-safe sequences.",
        },
        {
            "trigger": "filesizeformat",
            "contents": "filesizeformat()",
            "kind": ["markup", "f", "Jinja filter"],
            "annotation": "Jinja filter",
            "details": "Format the value like a ‘human-readable’ file size.",
        },
        {
            "trigger": "first",
            "contents": "first()",
            "kind": ["markup", "f", "Jinja filter"],
            "annotation": "Jinja filter",
            "details": "Return the first item of a sequence.",
        },
        {
            "trigger": "float",
            "contents": "float()",
            "kind": ["markup", "f", "Jinja filter"],
            "annotation": "Jinja filter",
            "details": "Convert the value into a floating point number.",
        },
        {
            "trigger": "forceescape",
            "contents": "forceescape()",
            "kind": ["markup", "f", "Jinja filter"],
            "annotation": "Jinja filter",
            "details": "Enforce HTML escaping.",
        },
        {
            "trigger": "format",
            "contents": "format()",
            "kind": ["markup", "f", "Jinja filter"],
            "annotation": "Jinja filter",
            "details": "Apply the given values to a <code>printf</code>-style format string, like string % values.",
        },
        {
            "trigger": "groupby",
            "contents": "groupby()",
            "kind": ["markup", "f", "Jinja filter"],
            "annotation": "Jinja filter",
            "details": "Group a sequence of objects by an attribute using Python’s <code>itertools.groupby()</code>.",
        },
        {
            "trigger": "indent",
            "contents": "indent()",
            "kind": ["markup", "f", "Jinja filter"],
            "annotation": "Jinja filter",
            "details": "Return a copy of the string with each line indented by 4 spaces.",
        },
        {
            "trigger": "int",
            "contents": "int()",
            "kind": ["markup", "f", "Jinja filter"],
            "annotation": "Jinja filter",
            "details": "Convert the value into an integer.",
        },
        {
            "trigger": "join",
            "contents": "join()",
            "kind": ["markup", "f", "Jinja filter"],
            "annotation": "Jinja filter",
            "details": "Return a string which is the concatenation of the strings in the sequence.",
        },
        {
            "trigger": "last",
            "contents": "last()",
            "kind": ["markup", "f", "Jinja filter"],
            "annotation": "Jinja filter",
            "details": "Return the last item of a sequence.",
        },
        {
            "trigger": "length",
            "contents": "length()",
            "kind": ["markup", "f", "Jinja filter"],
            "annotation": "Jinja filter",
            "details": "Return the number of items in a container.",
        },
        {
            "trigger": "list",
            "contents": "list()",
            "kind": ["markup", "f", "Jinja filter"],
            "annotation": "Jinja filter",
            "details": "Convert the value into a list.",
        },
        {
            "trigger": "lower",
            "contents": "lower()",
            "kind": ["markup", "f", "Jinja filter"],
            "annotation": "Jinja filter",
            "details": "Convert a value to lowercase.",
        },
        {
            "trigger": "max",
            "contents": "max()",
            "kind": ["markup", "f", "Jinja filter"],
            "annotation": "Jinja filter",
            "details": "Return the largest item from the sequence.",
        },
        {
            "trigger": "min",
            "contents": "min()",
            "kind": ["markup", "f", "Jinja filter"],
            "annotation": "Jinja filter",
            "details": "Return the smallest item from the sequence.",
        },
        {
            "trigger": "map",
            "contents": "map()",
            "kind": ["markup", "f", "Jinja filter"],
            "annotation": "Jinja filter",
            "details": "Applies a filter on a sequence of objects or looks up an attribute.",
        },
        {
            "trigger": "pprint",
            "contents": "pprint()",
            "kind": ["markup", "f", "Jinja filter"],
            "annotation": "Jinja filter",
            "details": "Pretty print a variable. Useful for debugging.",
        },
        {
            "trigger": "random",
            "contents": "random()",
            "kind": ["markup", "f", "Jinja filter"],
            "annotation": "Jinja filter",
            "details": "Return a random item from the sequence.",
        },
        {
            "trigger": "reject",
            "contents": "reject()",
            "kind": ["markup", "f", "Jinja filter"],
            "annotation": "Jinja filter",
            "details": "Filters a sequence of objects by applying a test to each object, and rejecting the objects with the test succeeding.",
        },
        {
            "trigger": "rejectattr",
            "contents": "rejectattr()",
            "kind": ["markup", "f", "Jinja filter"],
            "annotation": "Jinja filter",
            "details": "Filters a sequence of objects by applying a test to the specified attribute of each object, and rejecting the objects with the test succeeding.",
        },
        {
            "trigger": "replace",
            "contents": "replace()",
            "kind": ["markup", "f", "Jinja filter"],
            "annotation": "Jinja filter",
            "details": "Return a copy of the value with all occurrences of a substring replaced with a new one.",
        },
        {
            "trigger": "reverse",
            "contents": "reverse()",
            "kind": ["markup", "f", "Jinja filter"],
            "annotation": "Jinja filter",
            "details": "Reverse the object or return an iterator that iterates over it the other way round.",
        },
        {
            "trigger": "round",
            "contents": "round()",
            "kind": ["markup", "f", "Jinja filter"],
            "annotation": "Jinja filter",
            "details": "Round the number to a given precision.",
        },
        {
            "trigger": "safe",
            "contents": "safe()",
            "kind": ["markup", "f", "Jinja filter"],
            "annotation": "Jinja filter",
            "details": "Mark the value as safe which means that in an environment with automatic escaping enabled this variable will not be escaped.",
        },
        {
            "trigger": "select",
            "contents": "select()",
            "kind": ["markup", "f", "Jinja filter"],
            "annotation": "Jinja filter",
            "details": "Filters a sequence of objects by applying a test to each object, and only selecting the objects with the test succeeding.",
        },
        {
            "trigger": "selectattr",
            "contents": "selectattr()",
            "kind": ["markup", "f", "Jinja filter"],
            "annotation": "Jinja filter",
            "details": "Filters a sequence of objects by applying a test to the specified attribute of each object, and only selecting the objects with the test succeeding.",
        },
        {
            "trigger": "slice",
            "contents": "slice()",
            "kind": ["markup", "f", "Jinja filter"],
            "annotation": "Jinja filter",
            "details": "Slice an iterator and return a list of lists containing those items.",
        },
        {
            "trigger": "sort",
            "contents": "sort()",
            "kind": ["markup", "f", "Jinja filter"],
            "annotation": "Jinja filter",
            "details": "Sort an iterable using Python’s <code>sorted()</code>.",
        },
        {
            "trigger": "string",
            "contents": "string()",
            "kind": ["markup", "f", "Jinja filter"],
            "annotation": "Jinja filter",
            "details": "Convert an object to a string if it isn’t already.",
        },
        {
            "trigger": "striptags",
            "contents": "striptags()",
            "kind": ["markup", "f", "Jinja filter"],
            "annotation": "Jinja filter",
            "details": "Strip SGML/XML tags and replace adjacent whitespace by one space.",
        },
        {
            "trigger": "sum",
            "contents": "sum()",
            "kind": ["markup", "f", "Jinja filter"],
            "annotation": "Jinja filter",
            "details": "Returns the sum of a sequence of numbers plus the value of parameter ‘start’ (which defaults to 0).",
        },
        {
            "trigger": "title",
            "contents": "title()",
            "kind": ["markup", "f", "Jinja filter"],
            "annotation": "Jinja filter",
            "details": "Return a titlecased version of the value.",
        },
        {
            "trigger": "tojson",
            "contents": "tojson()",
            "kind": ["markup", "f", "Jinja filter"],
            "annotation": "Jinja filter",
            "details": "Serialize an object to a string of JSON, and mark it safe to render in HTML.",
        },
        {
            "trigger": "trim",
            "contents": "trim()",
            "kind": ["markup", "f", "Jinja filter"],
            "annotation": "Jinja filter",
            "details": "Strip leading and trailing characters, by default whitespace.",
        },
        {
            "trigger": "truncate",
            "contents": "truncate()",
            "kind": ["markup", "f", "Jinja filter"],
            "annotation": "Jinja filter",
            "details": "Return a truncated copy of the string.",
        },
        {
            "trigger": "unique",
            "contents": "unique()",
            "kind": ["markup", "f", "Jinja filter"],
            "annotation": "Jinja filter",
            "details": "Returns a list of unique items from the given iterable.",
        },
        {
            "trigger": "upper",
            "contents": "upper()",
            "kind": ["markup", "f", "Jinja filter"],
            "annotation": "Jinja filter",
            "details": "Convert a value to uppercase.",
        },
        {
            "trigger": "urlencode",
            "contents": "urlencode()",
            "kind": ["markup", "f", "Jinja filter"],
            "annotation": "Jinja filter",
            "details": "Quote data for use in a URL path or query using <code>UTF-8</code>.",
        },
        {
            "trigger": "urlize",
            "contents": "urlize()",
            "kind": ["markup", "f", "Jinja filter"],
            "annotation": "Jinja filter",
            "details": "Convert URLs in text into clickable links.",
        },
        {
            "trigger": "wordcount",
            "contents": "wordcount()",
            "kind": ["markup", "f", "Jinja filter"],
            "annotation": "Jinja filter",
            "details": "Count the words in that string.",
        },
        {
            "trigger": "wordwrap",
            "contents": "wordwrap()",
            "kind": ["markup", "f", "Jinja filter"],
            "annotation": "Jinja filter",
            "details": "Wrap a string to the given width.",
        },
        {
            "trigger": "xmlattr",
            "contents": "xmlattr()",
            "kind": ["markup", "f", "Jinja filter"],
            "annotation": "Jinja filter",
            "details": "Create an SGML/XML attribute string based on the items in a dict.",
        },
    ],
}
