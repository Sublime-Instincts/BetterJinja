%YAML 1.2
---
name: Jinja
file_extensions:
  - j2
  - jinja
  - jinja2
scope: text.jinja

variables:
  digit: '[0-9]'
  integers: '({{digit}}*_)?({{digit}}+)'
  floats: '({{digit}}+_?)?({{digit}}*)?(\.)({{digit}}+)([eE]?{{digit}}*)?'
  identifiers: '[a-zA-Z_][a-zA-Z0-9_]*'

  trim_block: '(?:[+-])'
  logical_operators: \b(?:and|or|not|in|is)\b
  builtin_tags: |-
    (?x:
      \b(?:
          block|recursive|macro
          |call|filter|set|extends|include|raw|debug|with
          |autoescape|trans|pluralize|scoped|as|do
      )\b
    )
  end_tags: |-
    (?x:
      \b(?:
        endblock|endfor|endmacro|endif
        |endautoescape|endverbatim|endapply|endembed
        |endsandbox|endcall|endset|endraw|endtrans
        |endfilter
      )\b
    )
  builtin_filters: |-
    (?x:
      \b(?:
        abs|attr|batch|capitalize|center|default|dictsort|escape|filesizeformat|
        first|float|forceescape|format|groupby|indent|int|join|last|length|list|
        lower|map|max|min|pprint|random|reject|rejectattr|replace|reverse|round|
        safe|select|selectattr|slice|sort|string|striptags|sum|title|tojson|trim
        |truncate|unique|upper|urlencode|urlize|wordcount|wordwrap|xmlattr|e|d|
        count
      )\b
    )
  builtin_tests: |-
    (?x:
      \b(?:
        boolean|callable|defined|divisibleby|equalto|eq|escaped|even|false|float|
        ge|gt|greaterthan|in|integer|iterable|le|lower|lt|lessthan|mapping|ne|
        none|number|odd|sameas|sequence|string|true|undefined|upper
      )\b
    )
  builtin_globals: |-
    (?x:
      \b(?:
        range|lipsum|dict|cycler|joiner|namespace
      )\b
    )
  builtin_vars: |-
    (?x:
      \b(?:
        loop
      )\b
    )

  # This is mainly used as lookahead so as to distinguish between
  # parenthesised expressions & tuples. This is borrowed from
  # the python syntax.
  simple_expression: |-
    (?x:
      (?: \s*
        | ("(?:[^"]*)")  # Match double strings
        | ('(?:[^']*)')  # Match single strings
        | ({{integers}}) # Match integers
        | ({{floats}})   # Match floats
      )
    )

contexts:
  main:
    # NOTE: Syntax variants override this context.
    - include: comment
    - include: statement_block
    - include: expression_block

  comment:
    - include: single_line_comment
    - include: multi_line_comment

  single_line_comment:
    - match: \#\#
      scope: punctuation.definition.comment.jinja
      push: single_line_comment_body

  single_line_comment_body:
    - meta_scope: comment.line.jinja
    - match: $\n?
      pop: true

  multi_line_comment:
    - match: \{\#
      scope: punctuation.definition.comment.begin.jinja
      push: multi_line_comment_body

  multi_line_comment_body:
    - meta_scope: comment.block.jinja
    - match: \#\}
      scope: punctuation.definition.comment.end.jinja
      pop: true

  statement_block:
    - match: \{\%{{trim_block}}?
      scope: punctuation.definition.statement.begin.jinja
      push: statement_block_body

  statement_block_body:
    - meta_include_prototype: false
    - meta_scope: meta.statement.jinja
    - match: (\s+\-(?!\%))|(\-\s+(?=\%))
      scope: invalid.illegal.jinja
    - match: '{{trim_block}}?\%\}'
      scope: punctuation.definition.statement.end.jinja
      pop: true
    - include: expressions

  expression_block:
    - match: \{{2}
      scope: punctuation.definition.placeholder.begin.jinja
      push: expression_block_body

  expression_block_body:
    - meta_scope: meta.placeholder.jinja
    - match: \}{2}
      scope: punctuation.definition.placeholder.end.jinja
      pop: true
    - include: expressions

  expressions:
    - include: others
    - include: get_item
    - include: data_structures
    - include: match_keywords
    - include: logical_operators
    - include: functions
    - include: constants
    - include: match_identifiers
    - include: string
    - include: numbers
    - include: operators
    - include: dot_accessor

  match_keywords:
    - match: \b(for)\b
      scope: keyword.control.loop.for.jinja
    - match: \b(if)\b
      scope: keyword.control.conditional.if.jinja
    - match: \b(else)\b
      scope: keyword.control.conditional.else.jinja
    - match: \b(elif)\b
      scope: keyword.control.conditional.elseif.jinja
    - match: \b(continue)\b
      scope: keyword.control.flow.continue.jinja
    - match: \b(break)\b
      scope: keyword.control.flow.break.jinja
    - match: '{{end_tags}}'
      scope: keyword.other.endtag.jinja
    - match: '{{builtin_tags}}'
      scope: keyword.other.tag.jinja

  others:
    - match: (\bignore\b)\s{1}(?=\bmissing\b)
      captures:
        1: keyword.other.jinja
    - match: (\bmissing\b)(?!\bignore\b\s{1})
      captures:
        1: keyword.other.jinja
    - match: (\bwith\b)\s{1}(?=\bcontext\b)
      captures:
        1: keyword.other.jinja
    - match: (\bcontext\b)(?!\bwith\b\s{1})
      captures:
        1: keyword.other.jinja
    - match: (\bwithout\b)\s{1}(?=\bcontext\b)
      captures:
        1: keyword.other.jinja

  import_statements:
    - match: \b(import)\b
      scope: keyword.control.import.jinja
      push:
        - meta_scope: meta.statement.import.jinja
        - match: (?=\S)
          pop: true
    - match: \b(from)\b
      scope: keyword.control.import.from.jinja
      push:
        - meta_scope: meta.statement.import.jinja
        - match: (?=\S)
          pop: true

  match_identifiers:
    - match: \b_\b
      scope: variable.language.blank.jinja
    - match: '({{builtin_vars}})|({{identifiers}})'
      captures:
        1: support.constant.jinja
        2: variable.other.jinja

  dot_accessor:
    - match: \.
      scope: punctuation.accessor.dot.jinja

  item_seperator:
    - match: \,
      scope: punctuation.separator.sequence.jinja

  functions:
    - match: (?:({{builtin_globals}})|(\w+))(\()
      # The non-global matched functions should only be user-defined functions.
      # User-defined tests and filters are matched greedily.
      captures:
        1: support.function.global.jinja
        2: variable.function.jinja
        3: punctuation.section.arguments.begin.jinja
      push:
        - meta_content_scope: meta.function-call.arguments.jinja
        - match: \)
          scope: punctuation.section.arguments.end.jinja
          pop: true
        - include: parameters
        - include: expressions
        - match: \,
          scope: punctuation.separator.parameters.twig

  parameters:
    - match: '{{identifiers}}'
      scope: variable.parameter.jinja

  get_item:
    - match: (\w+)(\[)
      captures:
        1: meta.item-access.jinja
        2: meta.item-access.jinja punctuation.section.brackets.begin.jinja
      push:
        - meta_content_scope: meta.item-access.jinja
        - match: \]
          scope: meta.item-access.jinja punctuation.section.brackets.end.jinja
          pop: true
        - include: expressions
        - match: ':'
          scope: punctuation.separator.slice.jinja

  data_structures:
    - include: lists
    - include: dictionaries
    - include: tuple_or_parenthesised_expression

  lists:
    - match: \[
      scope: punctuation.section.sequence.begin.jinja
      push:
        - meta_scope: meta.sequence.list.jinja
        - match: \]
          scope: punctuation.section.sequence.end.jinja
          pop: true
        - include: expressions
        - include: item_seperator

  dictionaries:
    - match: \{
      scope: punctuation.section.mapping.begin.jinja
      push:
        - meta_scope: meta.mapping.jinja
        - match: \}
          scope: punctuation.section.mapping.end.jinja
          pop: true
        - include: expressions
        - match: ':'
          scope: punctuation.separator.mapping.key-value.jinja
        - match: \,
          scope: punctuation.separator.mapping.pair.jinja

  tuple_or_parenthesised_expression:
    - match: \((?={{simple_expression}}\,)
      scope: punctuation.section.sequence.begin.jinja
      push:
        - meta_scope: meta.sequence.tuple.jinja
        - match: \)
          scope: punctuation.section.sequence.end.jinja
          pop: true
        - include: expressions
        - include: item_seperator
    - match: \(
      scope: punctuation.section.group.begin.jinja
      push:
        - meta_scope: meta.group.jinja
        - match: \)
          scope: punctuation.section.group.end.jinja
          pop: true
        - include: expressions

  logical_operators:
    - match: '\b(is)\s+(not)?\b'
      captures:
        1: keyword.operator.word.jinja
        2: keyword.operator.word.jinja
      # Greedily match the applied test to scope it.
      push:
        - match: '\b(?:({{builtin_tests}})|(\w+))\b'
          captures:
            1: support.function.test.jinja
            2: variable.function.test.jinja
          pop: true
        - match: '\S'
          scope: invalid.illegal.missing-test.jinja
          pop: true
    - match: '{{logical_operators}}'
      scope: keyword.operator.word.jinja

  string:
    - include: single_quoted_string
    - include: double_quoted_string

  single_quoted_string:
    - match: \'
      scope: punctuation.definition.string.begin.jinja
      push: single_quoted_string_body

  single_quoted_string_body:
    - meta_include_prototype: false
    - meta_scope: meta.string.jinja string.quoted.single.jinja
    - match: \'
      scope: punctuation.definition.string.end.jinja
      pop: true
    - include: within_strings

  double_quoted_string:
    - match: \"
      scope: punctuation.definition.string.begin.jinja
      push: double_quoted_string_body

  double_quoted_string_body:
    - meta_include_prototype: false
    - meta_scope: meta.string.jinja string.quoted.double.jinja
    - match: \"
      scope: punctuation.definition.string.end.jinja
      pop: true
    - include: within_strings

  within_strings:
    - include: escape_characters
    - include: printf_placeholder
    - include: other_placeholder

  other_placeholder:
    - match: \{
      scope: punctuation.section.interpolation.begin.jinja
      push:
        - clear_scopes: 1
        - meta_scope: meta.interpolation.jinja
        - meta_content_scope: text.embedded.jinja
        - match: \}
          scope: punctuation.section.interpolation.end.jinja
          pop: true
        - include: expressions

  printf_placeholder:
    - match: \%[\w]
      scope: constant.other.placeholder.jinja

  escape_characters:
    - match: \\['"]
      scope: constant.character.escape.jinja
    - match: \{[{%]
      scope: constant.character.escape.jinja

  operators:
    - match: \|
      scope: keyword.operator.logical.pipe.jinja
      # Greedily match the applied filter to scope it as a filter.
      push:
        - match: '\b(?:({{builtin_filters}})|({{identifiers}}))\b'
          captures:
            1: support.function.filter.jinja
            2: variable.function.filter.jinja
          pop: true
        - match: '\S'
          scope: invalid.illegal.missing-filter.jinja
          pop: true
    - include: other_operators

  other_operators:
    - match: \~
      scope: keyword.operator.concatenation.jinja
    - match: '\={2}'
      scope: keyword.operator.comparison.jinja
    - match: '!\='
      scope: keyword.operator.comparison.jinja
    - match: '='
      scope: keyword.operator.assignment.jinja
    - match: '[<>]='
      scope: keyword.operator.comparison.jinja
    - match: '[<>]'
      scope: keyword.operator.comparison.jinja
    - match: '[\*\/]{2}'
      scope: keyword.operator.arithmetic.jinja
    - match: '[\+\-\*\/\%]'
      scope: keyword.operator.arithmetic.jinja

  constants:
    - match: \b([Tt]rue|[Ff]alse)\b
      scope: constant.language.boolean.jinja
    - match: \b([Nn]one)\b
      scope: constant.language.null.jinja

  numbers:
    - include: floats
    - include: integers

  integers:
    - match: '{{integers}}'
      scope: meta.number.integer.decimal.jinja
      captures:
        1: constant.numeric.value.jinja
        2: constant.numeric.value.jinja

  floats:
    - match: '{{floats}}'
      scope: meta.number.float.decimal.jinja
      captures:
        1: constant.numeric.value.jinja
        2: constant.numeric.value.jinja
        3: punctuation.separator.decimal.jinja
        4: constant.numeric.value.jinja
        5: constant.numeric.value.exponent.jinja
